- op: add
  path: /spec/template/spec/files/-
  value:
    content: |
      Stop-Service kubelet -Force

      $$CI_VERSION="${CI_VERSION}"
      if($$CI_VERSION -ne "")
      {
        $$binaries=@("kubeadm", "kubectl", "kubelet", "kube-proxy")
        $$ci_url="https://storage.googleapis.com/k8s-release-dev/ci/$$CI_VERSION/bin/windows/amd64"
        foreach ( $$binary in $$binaries )
        {
          echo "downloading binary: $$ci_url/$$binary.exe"
          curl.exe --retry 10 --retry-delay 5 "$$ci_url/$$binary.exe" --output "c:/k/$$binary.exe"
        }
      }

      $$CONTAINERD_URL="${WINDOWS_CONTAINERD_URL}"
      if($$CONTAINERD_URL -ne ""){
        Stop-Service containerd -Force
        echo "downloading containerd: $$CONTAINERD_URL"
        curl.exe --retry 10 --retry-delay 5 -L "$$CONTAINERD_URL" --output "c:/k/containerd.tar.gz"
        cmd /c tar -zxvf c:/k/containerd.tar.gz -C "c:/Program Files/containerd" --strip-components 1
        containerd.exe --version
        containerd-shim-runhcs-v1.exe --version
        Start-Service containerd
      }

      # Tag it to the ci version.  The image knows how to use the copy locally with the configmap
      # that is applied at at this stage (windows-kubeproxy-ci.yaml)
      ctr.exe -n k8s.io images pull docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess
      ctr.exe -n k8s.io images tag docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess "docker.io/sigwindowstools/kube-proxy:${CI_VERSION/+/_}-calico-hostprocess"

      kubeadm.exe version -o=short
      kubectl.exe version --client=true --short=true
      kubelet.exe --version
    path: C:/replace-k8s-binaries.ps1
    permissions: "0744"
- op: add
  path: /spec/template/spec/preKubeadmCommands/-
  value:
    powershell C:/replace-k8s-binaries.ps1
